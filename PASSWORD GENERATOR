import string
import random
from tkinter import *
from tkinter import messagebox
import sqlite3


# Create or connect to the database and create a table for storing usernames and generated passwords if it doesn't exist
with sqlite3.connect("users.db") as db:
    cursor = db.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users(Username TEXT NOT NULL, GeneratedPassword TEXT NOT NULL);")
cursor.execute("SELECT * FROM users")
db.commit()
db.close()


# GUI Class for the Password Generator Application
class GUI():
    def __init__(self, master):
        self.master = master
        self.username = StringVar()
        self.passwordlen = IntVar()
        self.generatedpassword = StringVar()
        self.n_username = StringVar()
        self.n_generatedpassword = StringVar()
        self.n_passwordlen = IntVar()

        # Set window properties
        master.title('Password Generator')  # Window title
        master.geometry('750x600')  # Set window size
        master.config(bg='#F0F8FF')  # Set background color to a soft light blue
        master.resizable(False, False)  # Disable resizing the window

        # Title label
        self.label = Label(text=":PASSWORD GENERATOR:", anchor=N, fg='darkslategray', bg='#F0F8FF', font='Arial 24 bold underline')
        self.label.grid(row=0, column=0, columnspan=2, pady=(20, 10))

        # Username input field
        self.user = Label(text="Enter User Name: ", font='Helvetica 14 bold', bg='#F0F8FF', fg='darkslategray')
        self.user.grid(row=1, column=0, pady=10, padx=10, sticky=W)

        self.textfield = Entry(textvariable=self.n_username, font='Helvetica 14', bd=5, relief='solid')
        self.textfield.grid(row=1, column=1, pady=10, padx=10)
        self.textfield.focus_set()

        # Password length input field
        self.length = Label(text="Enter Password Length: ", font='Helvetica 14 bold', bg='#F0F8FF', fg='darkslategray')
        self.length.grid(row=2, column=0, pady=10, padx=10, sticky=W)

        self.length_textfield = Entry(textvariable=self.n_passwordlen, font='Helvetica 14', bd=5, relief='solid')
        self.length_textfield.grid(row=2, column=1, pady=10, padx=10)

        # Generated password output
        self.generated_password = Label(text="Generated Password: ", font='Helvetica 14 bold', bg='#F0F8FF', fg='darkslategray')
        self.generated_password.grid(row=3, column=0, pady=10, padx=10, sticky=W)

        self.generated_password_textfield = Entry(textvariable=self.n_generatedpassword, font='Helvetica 14', bd=5, relief='solid', fg='#8B0000')
        self.generated_password_textfield.grid(row=3, column=1, pady=10, padx=10)

        # Button section
        button_font = ('Helvetica', 14, 'bold')

        # Password generation button
        self.generate = Button(text="Generate Password", bd=3, relief='raised', padx=20, pady=10, font=button_font, fg='#ffffff', bg='#4682B4', command=self.generate_pass)
        self.generate.grid(row=4, column=0, columnspan=2, pady=20)

        # Accept button to save the username and generated password to the database
        self.accept = Button(text="Accept", bd=3, relief='raised', padx=20, pady=10, font=button_font, fg='#ffffff', bg='#32CD32', command=self.accept_fields)
        self.accept.grid(row=5, column=0, columnspan=2, pady=10)

        # Reset button to clear input fields
        self.reset = Button(text="Reset", bd=3, relief='raised', padx=20, pady=10, font=button_font, fg='#ffffff', bg='#FF6347', command=self.reset_fields)
        self.reset.grid(row=6, column=0, columnspan=2, pady=10)


    # Function to generate a random password based on input length
    def generate_pass(self):
        upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        lower = "abcdefghijklmnopqrstuvwxyz"
        chars = "@#%&()\"?!"
        numbers = "1234567890"

        name = self.textfield.get()
        leng = self.length_textfield.get()

        with sqlite3.connect("users.db") as db:
            cursor = db.cursor()

        # Error handling for empty name or non-alphabetical characters in username
        if name == "":
            messagebox.showerror("Error", "Name cannot be empty")
            return

        if name.isalpha() == False:
            messagebox.showerror("Error", "Name must be a string")
            self.textfield.delete(0, 25)
            return

        # Ensure password length is at least 6 characters
        length = int(leng) 
        if length < 6:
            messagebox.showerror("Error", "Password must be at least 6 characters long")
            return

        # Generate password with at least 1 character from each category
        password = []
        password.append(random.choice(upper))  # Add one uppercase letter
        password.append(random.choice(lower))  # Add one lowercase letter
        password.append(random.choice(chars))  # Add one special character
        password.append(random.choice(numbers))  # Add one number

        # Fill the rest of the password length with random choices from all categories
        all_chars = upper + lower + chars + numbers
        for _ in range(length - 4):
            password.append(random.choice(all_chars))

        # Shuffle the list to ensure the characters are in random order
        random.shuffle(password)

        # Join the list into a single string
        gen_passwd = "".join(password)
        self.n_generatedpassword.set(gen_passwd)
        self.generated_password_textfield.delete(0, length)
        self.generated_password_textfield.insert(0, gen_passwd)


    # Function to accept and save the username and password to the database
    def accept_fields(self):
        with sqlite3.connect("users.db") as db:
            cursor = db.cursor()
            find_user = ("SELECT * FROM users WHERE Username = ?")
            cursor.execute(find_user, [(self.n_username.get())])

            if cursor.fetchall():
                messagebox.showerror("Error", "This username already exists! Please use another username.")
            else:
                insert = ("INSERT INTO users(Username, GeneratedPassword) VALUES(?, ?)")
                cursor.execute(insert, (self.n_username.get(), self.n_generatedpassword.get()))
                db.commit()
                messagebox.showinfo("Success!", "Password generated and saved successfully")

    # Function to reset input fields
    def reset_fields(self):
        self.textfield.delete(0, 25)
        self.length_textfield.delete(0, 25)
        self.generated_password_textfield.delete(0, 25)


# Main function to run the application
if __name__ == '__main__':
    root = Tk()
    pass_gen = GUI(root)
    root.mainloop()
