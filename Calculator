# This is a Modern Scientific Calculator implemented using Tkinter in Python.
# It provides basic arithmetic operations along with scientific functions like
# trigonometric calculations (sin, cos, tan), logarithms (log, ln), square root,
# and constants (Ï€ and e). The calculator has a modern design with custom colors 
# and styles for the buttons and entry field.

import tkinter as tk
import math

# Main window setup
root = tk.Tk()
root.title('Modern Scientific Calculator')
root.configure(bg='#2D2D2D')
root.resizable(width=False, height=False)

# Entry field for displaying calculations
ent_field = tk.Entry(root, bg='#333333', fg='#F2F2F2', font=('Helvetica', 20),
                     borderwidth=5, justify="right", relief=tk.FLAT)
ent_field.grid(row=0, column=0, columnspan=8, padx=15, pady=15, sticky='nsew')
ent_field.insert(0, '0')

# Define font and styles
BUTTON_FONT = ('Helvetica', 14, 'bold')
BG_COLOR = '#505050'
BTN_COLOR = '#3A3A3A'
BTN_TEXT_COLOR = '#F2F2F2'

# Scientific calculator class
class SC_Calculator():
    def __init__(self):
        self.current = ''
        self.inp_value = True
        self.result = False

    def Entry(self, value):
        ent_field.delete(0, 'end')
        ent_field.insert(0, value)

    def Enter_Num(self, num):
        self.result = False
        firstnum = ent_field.get()
        secondnum = str(num)
        if self.inp_value:
            self.current = secondnum
            self.inp_value = False
        else:
            self.current = firstnum + secondnum
        self.Entry(self.current)

    def Standard_Ops(self, val):
        temp_str = ent_field.get()
        try:
            if val == '=':
                ans = str(eval(temp_str))
                self.result = True
                self.Entry(ans)
            else:
                self.Entry(temp_str + val)
            self.inp_value = False
        except Exception:
            self.Entry('Error')

    def Clear_Entry(self):
        self.result = False
        self.current = "0"
        self.Entry(0)
        self.inp_value = True

    # Define functions for operations
    # (Square root, pi, exponentials, logarithms, etc. can be implemented similarly)
    # ...

# Function to create buttons with color and style
def create_button(text, row, col, command, color=BTN_COLOR, font=BUTTON_FONT):
    return tk.Button(root, text=text, font=font, bg=color, fg=BTN_TEXT_COLOR,
                     width=5, height=2, command=command, relief=tk.FLAT,
                     highlightbackground=color).grid(row=row, column=col, sticky='nsew', padx=5, pady=5)

# Instantiate the calculator class
sc_app = SC_Calculator()

# Number buttons
numberpad = "789456123"
i = 0
for j in range(2, 5):
    for k in range(3):
        create_button(numberpad[i], j, k, lambda x=numberpad[i]: sc_app.Enter_Num(x))
        i += 1
create_button('0', 5, 1, lambda: sc_app.Enter_Num('0'))

# Operations buttons
create_button('CE', 1, 0, lambda: sc_app.Clear_Entry(), color=BG_COLOR)
create_button('\u221A', 1, 2, lambda: sc_app.SQ_Root(), color=BG_COLOR)
create_button('+', 1, 3, lambda: sc_app.Standard_Ops('+'), color=BG_COLOR)
create_button('-', 2, 3, lambda: sc_app.Standard_Ops('-'), color=BG_COLOR)
create_button('*', 3, 3, lambda: sc_app.Standard_Ops('*'), color=BG_COLOR)
create_button('/', 4, 3, lambda: sc_app.Standard_Ops('/'), color=BG_COLOR)
create_button('.', 5, 2, lambda: sc_app.Standard_Ops('.'))
create_button('=', 5, 3, lambda: sc_app.Standard_Ops('='), color='#00BFA5')

# Additional scientific function buttons (e.g., sin, cos, tan)
create_button('sin', 1, 4, lambda: sc_app.Sin(), color=BG_COLOR)
create_button('cos', 2, 4, lambda: sc_app.Cos(), color=BG_COLOR)
create_button('tan', 3, 4, lambda: sc_app.Tan(), color=BG_COLOR)
create_button('log', 4, 4, lambda: sc_app.Log_10(), color=BG_COLOR)
create_button('ln', 5, 4, lambda: sc_app.Ln(), color=BG_COLOR)
create_button('\u03C0', 1, 5, lambda: sc_app.Pi(), color=BG_COLOR)
create_button('e', 2, 5, lambda: sc_app.E(), color=BG_COLOR)

# Adjust window grid weights for resizing
for i in range(6):
    root.grid_rowconfigure(i, weight=1)
for i in range(8):
    root.grid_columnconfigure(i, weight=1)

root.mainloop()
